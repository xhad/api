#!/usr/local/bin/node
"use strict";


// track if we are doing a package setup
var setup = false;

// check arguments
process.argv.forEach(function(val){
  if(val === 'setup'){
    setup = true;
  }
});

// if use used the setup argument `./Chaintrader setup`
if (setup){
  runSetup();
} else {
  runAdminTool();
}

// run application setup
// this should really only ever happen once
function runSetup(){

  var banner = '-------------------------------\n' +
               'Chaintrader Setup Tool\n' +
               '---------------------------------' +
               ' Skip this step for development. ' +
               '                                 ' +
               ' Otherwise follow the prompts.   ' +
               '                                 ' +
               '                                 ' +
               '                                 ' +
               '---------------------------------';

  var exec = require('child_process').exec;
  var child = exec('npm install && bower install && utils/dbTools.js --all && gulp build');
  child.stdout.on('data', function(data) {
      console.log(data.toString());
  });
  child.stderr.on('data', function(data) {
      console.log(data.toString());
  });
  child.on('close', function(code) {
      console.log(code.toString());

      // get our modules
      var chalk = require('chalk');
      var prompt = require('prompt');

      // customize the prompt
      prompt.message = "FX>".green;
      // prompt.delimitier = "><".green;

      // store our config info
      var config = {}

      // Run Setup Tool
      console.log(chalk.yellow(banner));
      console.log(chalk.red('Beginning Setup Process'));
      prompt.start();

      prompt.get([{
        name: 'doAdminSetup',
        description: 'Setup Administration Account ((y)es/no)',
        type: 'string',
        conform: function(value){
          value = value.toLowerCase();
          if (value === 'y' || value === 'yes' || value === 'no' || value === 'n'){
            return true;
          } else {
            return false;
          }
        },
        default: 'yes'
      }], function(err, result){

        if (result.doAdminSetup.toLowerCase() === 'no' || result.doAdminSetup.toLowerCase() === 'n'){
          console.log(chalk.yellow('Done!'));
          return;
        }

        // get user settings
        prompt.get([{
            name: 'username',
            required: true
          }, {
            name: 'password',
            hidden: true,
            required: true,
            message: 'Must be 8 characters or more',
            conform: function (value) {
              if (value.length >= 8){
                return true;
              } else {
                return false;
              }
            }
          }, {
            name: 'exchangeName',
            type: 'string',
            description: 'The exchange name',
            required: true,
          }, {
            name: 'marginRequirements',
            type: 'number',
            message: 'Must be a number between 1 and 100',
            conform: function(value){
              if (value < 0 || value > 100){
                return false;
              } else {
                return true;
              }
            },
            description: 'Margin requirements:\ndefault: 100%\nMeaning 0 margin is allowed and 100% of the order cost is required for the order to post.\n',
            default: 100
          }],

          function (err, result) {
            config.username = result.username;
            config.password = result.password;
            config.email = result.email;
            config.exchangeName = result.exchangeName;
            config.marginRequirements = result.marginRequirements;

            console.log(config);

            // write this config somewhere?

          });
      });
    });
}

// the admin console tool
// currently just a mock - but this tool has the potential to be helpful
function runAdminTool() {

  // Run admin Tool
  var am = require("./server/marketEngine/accountManager");
  var Promise = require('bluebird');
  var User = require('./server/models/User');

  // Create a new instance of vantage.
  var vantage = require('vantage')();
  var chalk = require('chalk');

  var banner = '-----------------------------\n' +
               'Chaintrader Administration Tool\n' +
               '-----------------------------';

  // display an intro banner
  console.log(chalk.blue(banner));

  // set the exchange margin rate
  vantage
    .command("margin get")
    .description("Reports current margin requirements.")
    .action(function(args, callback) {
      // check margin reqs from db
      this.log('Margin requirments set to: ', 100);
      callback();
    });

  vantage
    .command("margin set <val>")
    .description("Takes a number between 0 and 100 that represents the margin requirement for an order.")
    .action(function(args, callback) {
      this.log('Setting margin to: ', args.val);
      callback();
    });

  // add a currency to the pool of currencies
  vantage
    .command("currency add <currency>")
    .description("Takes a 3 character string that represents a currency and adds it to the pool of usable currencies")
    .action(function(args, callback) {
      this.log('Adding currency: ', args.currency);
      callback();
    });

  // create a new pair from 2 existing currencies
  vantage
    .command("pair add <base> <quote>")
    .description("Takes 2 arguments. First the base currency and then the quote currency.")
    .action(function(args, callback) {
      this.log('Adding pair: ' + args.base + '/' + args.quote);
      callback();
    });

  // list all users (with filter)
  vantage
    .command("user list")
    .description("Get a list of all users.")
    .action(function(args, callback){
      this.log('Listing all users:');
      User.fetchAll()
        .then(function(users){
          users.forEach(function(model){
            console.log(model.get('email'));
          });
          callback();
        })
        .catch(function(err){
          console.log(err);
          callback();
        });
    });

  // find a user
  vantage
    .command("user get <userEmail>")
    .description("get a user by email")
    .action(function(args, callback) {
      this.log('Getting user info for: ', args.userEmail);
      User.forge({email: args.userEmail}).fetch({withRelated: ['accounts']})
        .then(function(user){

          // non-relational accounts
          var account1 = user.related('accounts').at(0);
          var account2 = user.related('accounts').at(1);

          return new Promise.all([
            account1,
            account2,

            // get some related data too
            user.related('accounts').at(0).related('currency').fetch(),
            user.related('accounts').at(1).related('currency').fetch()
          ]);

        })
        .then(function(accountData){

          return new Promise.all([
            // currency strings
            accountData[2].get('currency'),
            accountData[3].get('currency'),

            // must use non-relational account data for balance
            am.getAccountBalance(accountData[0]),
            am.getAccountBalance(accountData[1])

            ]);
        })
        .then(function(balances){
          console.log('Balance:');
          console.log(balances[0] + ': ' + balances[2]);
          console.log(balances[1] + ': ' + balances[3]);
          callback();
        })
        .catch(function(err){
          console.log('-->', err);
          callback();
        });
    });

  // CREATE USER
  vantage
    .command("user create")
    .description("Create a user account")
    .action(function(args, callback) {
      var self = this;
      this.prompt([{
        type: "input",
        name: "email",
        message: "Provide a user email address.",
      }, {
        type: "input",
        name: "lsd",
        message: "Provide a user password.",
      }], function(result){
          self.log("Good move.", result);
          callback();
        }
      );
    });

        //console.log(result);
        //User.forge({email: result.email, password: result.password})
        //  .fetch()
        //  .save()
        //  .finally(callback);

  // SET USER DATA
  vantage
    .command("user [email]")
    .description("Make changes to a user account")
    .option('-w, --withdraw [amount]', 'Withdraw amount')
    .option('-d, --deposit [amount]', 'Deposit amount')
    .option('-c, --currency [type]', 'Currency to transact in.')
    .action(function(args, callback) {

      this.log('Executing: ', args.options, ' on user: ', args.email);

      // get the user / accounts info based on email
      getUserInfo(args)
        .then(function(userAccountsInfo){
          var accountIndex = 0;

          if (args.options.currency !== 'BTC' && args.options.currency !== 'USD') {
            console.log('Must select currency');
            callback();
          }

          // fine out which account to use
          userAccountsInfo.forEach(function(account, index){
            if (account[1] === args.options.currency){
              console.log('You chose ', account[0] + ' of type: ', account[1]);
              accountIndex = index;
            }
          });

          // find out which action to use
          if (args.options.withdraw){
            am.withdrawFromAccount(userAccountsInfo[accountIndex][0], args.options.withdraw)
              .finally(callback);
          } else if (args.options.deposit){
            am.depositToAccount(userAccountsInfo[accountIndex][0], args.options.deposit)
              .finally(callback);
          }

        })
        .catch(function(err){
          console.log(err);
          callback();
        });
    });

  // set prompt, port
  // and show the Vantage prompt.
  vantage
    .delimiter("Chaintrader$")
    .listen(8888)
    .show();


  //
  // call the db and get info about the user and his accounts
  // return a promise
  function getUserInfo(args){
    return new Promise(function(resolve, reject){
      User.forge({email: args.email}).fetch({withRelated: ['accounts']})
        .then(function(user){

          // non-relational accounts
          var account1 = user.related('accounts').at(0);
          var account2 = user.related('accounts').at(1);

          return new Promise.all([
            account1,
            account2,

            // get some related data too
            user.related('accounts').at(0).related('currency').fetch(),
            user.related('accounts').at(1).related('currency').fetch(),

            // pass along account ids as well
            account1.id,
            account2.id

          ]);

        })
        .then(function(accountData){

          return new Promise.all([
            // currency strings
            accountData[2].get('currency'),
            accountData[3].get('currency'),


            // must use non-relational account data for balance
            am.getAccountBalance(accountData[0]),
            am.getAccountBalance(accountData[1]),

            accountData[4],
            accountData[5]

            ]);
        })
        .then(function(balances){
          // return an array of tuples
          // [[accountID, 'USD', 1000], [accountID, 'BTC', 500]]
          resolve([
            [balances[4], balances[0], balances[2]],
            [balances[5], balances[1], balances[3]]
          ]);
        })
        .catch(function(err){
          console.log('-->', err);
          reject(err);
        });
    });
  }
}
