
The Order Matcher's role is to process a valid order from the
order desk and try to partially or completely fill it against other
orders resting on the order book.

The matcher listens for a 'new:order' event emitted by the order desk
that passes it an order-id

Assumptions:
- The order desk has already saved the order to the database
- Holds are already placed on the appropriate currency account

Processing:

fetch the "order" from the database (model)

fetch "counter offers" from db (collection)
    If order side is a 'buy', load the asks where price <= order.price  and status = 'open'
    If order side is a 'sell', load the bids where price >= order.price and status = 'open'
      sorted by best price (descending for asks, ascending for bids)
      sorted by 'created_at' ascending (oldest orders get matched first)

Incoming order is considered the taker_order
  because they would removed an order from the market if there is a match

loop over offers in counter offers collection

  order remaining size = order.size - order.filled_size (A)
  offer remaining size = offer.size - offer.filled_size (B)

  >> assert order remaining  size > 0

  if order and offer remaining sizes match (A == B)
     BEGIN transaction (SQL)
     do complete fill to order
       set order status to 'done'
       set order done_reason to 'match'
       set order filled_size to order.size
       set order done_at to current timestamp
     do complete fill to offer
       same as above
     create trade    (size: A)
       set type  order.side
       set price offer.price
       set size  A
       set maker_id = offer.user_id
       set taker_id = order.user_id
       set maker_order_id = offer.id
       set taker_order_id = order.id
       set currency_pair_id = order.currency_pair_id

     update buyer account balances
       currency_pair.base_currency:increase by A
       currency_pair.quote_currency: decrease by price
     create transaction on buyer base currency account
       set amount = A
       set balance = new balance
     create transaction on buyer quote currency account

     update seller account balances
      currency_pair.base_currency:decrease by A
      currency_pair.quote_currency: increase by price
     create transaction on seller base currency account
     create transaction on seller quote currency account

     //remove buyer holds on quote currency account
     //remove seller holds on base currency account
     COMMIT transaction (SQL)
     emit trade event
     exit loop

  else if order remaining size is greater than offer remaining size (A > B)
     BEGIN transaction
     do complete fill to offer
     do partial fill to order
     create trade (size: B)
     create transaction on buyer base currency account
     create transaction on buyer quote currency account
     update buyer account balances (2)
     create transaction on seller base currency account
     create transaction on seller quote currency account
     update seller account balances (2)
     reduce buyer holds on quote currency account | or remove if complete fill
     reduce seller holds on base currency account | or remove if complete fill
     COMMIT transaction
     repeat loop

  else offer remaining size is greater than order remaining size (implied B > A)
    do complete fill to order
    do partial fill to offer
    create trade (size: A)
    create transaction on buyer base currency account
    create transaction on buyer quote currency account
    update buyer account balances (2)
    create transaction on seller base currency account
    create transaction on seller quote currency account
    update seller account balances (2)
    reduce buyer holds on quote currency account | or remove if complete fill
    reduce seller holds on base currency account | or remove if complete fill
    COMMIT transaction
    exit loop

loop



Handling Market Orders
----------------------------------------------------
http://www.investopedia.com/terms/m/marketorder.asp

We can look ahead and add up the volumes of all counter offers to determine
which case we will result in (complete or partial fill)

Generally risky to do market orders on low volume exchanges..

case 1: enough counter offers to fill the order
   order is filled... > status done (done_reason = match)

case 2: current offers do not fill the market order
   What should happen?
        // Chaintrader implements this option //
        option 1.  accept doing a partial fill
                set order status done (done_reason = market_exhausted)

        option 2.  do not execute the order at all

        option 3. Do partial fill, (queue market order for processing again,
             when more limit counter offers come in)
              this would mean we have to update our logic
              on incoming limit order, try and fill market orders in queue first

        option 4. turn it into limit order ?
